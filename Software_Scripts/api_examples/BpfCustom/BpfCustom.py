""""
This sample demonstrates how access the custom bpf data
"""

import iesve

def main_script():

    BpfCustom = iesve.BpfCustom()

    print("Transformer Losses Methods and properties:")
    print("    get():            ", BpfCustom.get())
    print("    name:             ", BpfCustom.name)

    # Methods can be chained on constructor when accessing only one variable.
    print("    get one liner:    ", iesve.BpfCustom().get())

    # Example of BPF structure
    # #                         0A    1A    0B    1B    2A    2B    3A    3B    3C    4A    4B    4C    5A    5B    5C    6A    6B    7     8
    # 'Multifamily':          [0.78, 0.88, 0.80, 0.80, 0.86, 0.86, 0.89, 0.88, 0.89, 0.84, 0.86, 0.84, 0.80, 0.83, 0.85, 0.88, 0.81, 0.88, 0.82],
    # 'Healthcare/hospital':  [0.78, 0.88, 0.80, 0.80, 0.86, 0.86, 0.89, 0.88, 0.89, 0.84, 0.86, 0.84, 0.80, 0.83, 0.85, 0.88, 0.81, 0.88, 0.82],
    # 'Hotel':                [0.78, 0.88, 0.80, 0.80, 0.86, 0.86, 0.89, 0.88, 0.89, 0.84, 0.86, 0.84, 0.80, 0.83, 0.85, 0.88, 0.81, 0.88, 0.82],
    # 'Office':               [0.78, 0.88, 0.80, 0.80, 0.86, 0.86, 0.89, 0.88, 0.89, 0.84, 0.86, 0.84, 0.80, 0.83, 0.85, 0.88, 0.81, 0.88, 0.82],
    # 'Restaurant':           [0.78, 0.88, 0.80, 0.80, 0.86, 0.86, 0.89, 0.88, 0.89, 0.84, 0.86, 0.84, 0.80, 0.83, 0.85, 0.88, 0.81, 0.88, 0.82],
    # 'Retail':               [0.78, 0.88, 0.80, 0.80, 0.86, 0.86, 0.89, 0.88, 0.89, 0.84, 0.86, 0.84, 0.80, 0.83, 0.85, 0.88, 0.81, 0.88, 0.82],
    # 'School':               [0.78, 0.88, 0.80, 0.80, 0.86, 0.86, 0.89, 0.88, 0.89, 0.84, 0.86, 0.84, 0.80, 0.83, 0.85, 0.88, 0.81, 0.88, 0.82],
    # 'Warehouse':            [0.78, 0.88, 0.80, 0.80, 0.86, 0.86, 0.89, 0.88, 0.89, 0.84, 0.86, 0.84, 0.80, 0.83, 0.85, 0.88, 0.81, 0.88, 0.82],
    # 'Other':                [0.78, 0.88, 0.80, 0.80, 0.86, 0.86, 0.89, 0.88, 0.89, 0.84, 0.86, 0.84, 0.80, 0.83, 0.85, 0.88, 0.81, 0.88, 0.82]
    # }

if __name__ == "__main__":
    main_script()